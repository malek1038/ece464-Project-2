# Slight ChatGPT use nothing major, mostly debugging and small adjustments
import requests
from bs4 import BeautifulSoup
from dataBase import get_players_collection

def insert_player_stats(player_id):
    retries = 3  # Number of attempts to retry fetching player data
    for attempt in range(retries):
        url = f'https://www.nba.com/stats/player/{player_id}/'
        response = requests.get(url)
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            title_content = soup.title.string

            # Attempt to split the title and catch if sent to the homepage
            try:
                player_name, team_name, _ = title_content.split(' | ')
                
                # Once correct page is found, procceed to extract player stats
                player_stats = {
                    "playerId": player_id,
                    "name": player_name,
                    "team": team_name,
                    "stats": {}
                }
                # Extract player stats from the page
                stat_divs = soup.find_all("div", class_="PlayerSummary_playerStat__rmEOP")
                for div in stat_divs:
                    stat_label = div.find("p", class_="PlayerSummary_playerStatLabel__I3TO3").text
                    stat_value = div.find("p", class_="PlayerSummary_playerStatValue___EDg_").text
                    player_stats["stats"][stat_label] = stat_value
                
                # Insert the player stats into the database
                players_collection = get_players_collection()
                players_collection.insert_one(player_stats)
                print(f"Inserted stats for {player_name} into the database.")
                break
                
            except ValueError as e:
                # Handle the case where we go to the homepage
                print(f"Attempt {attempt + 1} failed for player ID {player_id}. Retrying...")
                if attempt == retries - 1:
                    # If this was the last retry, skip this player
                    print(f"Failed to fetch data for player ID {player_id} after {retries} attempts. Skipping...")
        else:
            print(f"Failed to fetch data for player ID {player_id}. Status code: {response.status_code}")
            break  # Exit the loop if the status code indicates an error

player_ids_string = "1628369, 201950, 1627759, 204001, 1628401, 1630202, 1629052, 1641809, 1631120, 1630214, 1641775, 1630573, 1628436, 201143, 1630531, 1629004, 1629674, 1641727, 1628969, 1629661, 1628372, 1629022, 1630570, 1627732, 1628966, 1631367, 1641798, 203471, 1630549, 1641730, 1630592, 1630560, 1627827, 1629651, 1630553, 1628978, 1631210, 1630613, 1630540, 1628404, 1629718, 1630173, 1628384, 1628973, 1629003, 202692, 1629011, 203944, 202711, 1630579, 1628392, 1630178, 1630231, 1628964, 200768, 1629001, 1626162, 1630288, 202699, 1641741, 1627741, 203954, 1626166, 1631173, 203496, 201587, 1630194, 1630539, 1631241, 1641711, 1629667, 1630618, 1630567, 1630193, 1629628, 1628971, 1629670, 1631338, 202066, 1627751, 1628449, 1630534, 1629018, 1629007, 203482, 1641847, 1629632, 1628366, 203083, 1628975, 1627936, 203897, 202696, 201942, 1630245, 1628470, 1641763, 1641931, 1641766, 1629750, 1631207, 1630678, 1630172, 1630929, 1629622, 1629660, 1627747, 1630596, 1630241, 1631250, 1641854, 1629636, 202684, 1630600, 1627777, 1641734, 202694, 1627745, 1628386, 1629731, 1628378, 1631105, 1630595, 1629002, 1628972, 1631197, 1641709, 1630164, 1630649, 1630201, 1641787, 1631323, 1631093, 1629656, 1631204, 1631205, 1630191, 203095, 201959, 1630169, 1631097, 1630167, 1629614, 1641716, 204456, 1631112, 201949, 203926, 1631209, 1630543, 1630174, 1630188, 1641767, 1631245, 1626167, 1627783, 1631131, 1641945, 203081, 1630699, 1627736, 1641753, 1626171, 201572, 201568, 1631260, 201976, 203114, 1631102, 1626192, 203507, 203648, 1641748, 1631157, 203109, 1630552, 1630235, 1641754, 1641723, 1627749, 1629027, 1629631, 203992, 1631100, 203991, 1630168, 1631243, 1629685, 1628981, 1629726, 1630249, 202083, 1630180, 1628970, 1630163, 1629684, 1630208, 1631109, 1631121, 1641733, 202722, 1641735, 1628998, 1641778, 1629716, 1630197, 1630550, 203995, 1630544, 1641706, 203552, 1626196, 1626179, 1626153, 1631107, 1631288, 201988, 1631170, 1628389, 1629639, 1631214, 1628997, 1631306, 202710, 1629312, 1631115, 1628418, 201567, 1629130, 1641710, 1628371, 1631216, 1629643, 1630591, 1631094, 204060, 1630284, 1630243, 1641724, 203914, 1628365, 1629021, 1630532, 1629678, 1628976, 1629048, 1630175, 1641774, 1641731, 1631098, 1630215, 1626145, 1631116, 1630166, 1630587, 1629673, 1631262, 1630264, 1629013, 1626158, 1630557, 1628398, 1628963, 1630647, 1630551, 1631128, 1629008, 1631124, 1641816, 203484, 201599, 1631212, 203200, 1630296, 203999, 1631221, 1630192, 1629618, 1627750, 1630643, 1628427, 203932, 1641740, 203937, 1630183, 1630162, 1629162, 1631111, 1631169, 1629638, 201144, 1629675, 1630227, 1628420, 203933, 203497, 1626157, 1631159, 1630568, 1628983, 1630581, 1629652, 1631119, 1631096, 1631114, 1630198, 1630322, 1631172, 1641745, 202687, 1641749, 1630598, 1641717, 1630846, 202330, 1629026, 203488, 1630703, 1629014, 1629028, 1629680, 1630625, 1631200, 203924, 1629650, 1627763, 1631101, 1630204, 1631303, 1641871, 1641739, 1631133, 1629057, 1630641, 1641712, 203903, 1641707, 1629012, 1641718, 1629659, 1641729, 1630554, 1627739, 1630184, 1629677, 1628381, 1628374, 1631117, 1630695, 1629647, 1630548, 1631254, 1630209, 1627780, 1630228, 1641764, 101108, 1630541, 1626172, 202691, 1630586, 1630611, 1629010, 203967, 203952, 203110, 1631311, 201939, 1631218, 1630311, 201566, 201935, 202695, 1630527, 1630538, 1629599, 1628464, 1641757, 1630563, 202331, 1629611, 200782, 1641738, 1629875, 1626181, 1631217, 1627826, 203486, 1641720, 1626156, 1629020, 203076, 1630219, 1629629, 1629216, 1631108, 1629637, 1627752, 1630658, 1630559, 1628385, 1641721, 2544, 203915, 1629060, 1626174, 1626220, 1626164, 1629006, 203078, 202738, 1628960, 1627814, 1629626, 1630688, 1629234, 203994, 1631223, 201569, 1629642, 1628962, 201152, 201142, 1630240, 1628370, 201580, 1630537, 1628368, 1628426, 1628989, 1627734, 1631099, 1630558, 1630556, 1641771, 1641732, 1630222, 1631165, 203458, 1630259, 203084, 1626168, 203957, 1630314, 1630702, 1641726, 203939, 1630182, 1630639, 203501, 202681, 1641788, 1641765, 1629655, 1629023, 1630535, 1628467, 1627884, 1629029, 202693, 1631257, 1628988, 1641708, 1629111, 1630224, 1627832, 1641715, 1630256, 1628415, 1631095, 203500, 1630207, 1631106, 1631466, 203493, 1630578, 201145, 1626246, 1641970, 1630692, 1630590, 1631222, 1631246, 1630583, 1630533, 1628379, 1629630, 1628991, 1629634, 1629139, 1630217, 201565, 1630205, 1630610, 203935, 1641713, 1629723, 1641998, 1631220, 1629627, 203468, 1630529, 1630230, 1630700, 1627742, 1630631, 202685, 1626204, 1641722, 1630530, 1630604, 1630792, 1630346, 203469, 1630526, 1630564, 1641705, 1629640, 1628984, 1631110, 1631104, 1626224, 1631123, 1631103, 1628380, 1630170, 1631321, 1631230, 1629646, 1630561, 1630577, 1630200, 1630572"

player_ids = [id.strip() for id in player_ids_string.split(",")]

for player_id in player_ids:
    insert_player_stats(player_id)
